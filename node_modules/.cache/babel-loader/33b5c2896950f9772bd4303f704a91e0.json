{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ebr\\\\code\\\\navigator_admin\\\\src\\\\App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport './App.css';\nimport Navbar from \"./components/Navbar\";\nimport Dashboard from \"./components/Dashboard\";\nimport Navigatoren from \"./components/Navigatoren\";\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nlet server_url = \"localhost:8080/server\";\n\nconst App = () => {\n  _s();\n\n  const [answer, setAnswer] = useState(undefined);\n  const [waiting, setWaiting] = useState(true);\n  const [errorMessage, setErrorMessage] = useState(\"\");\n\n  const getAnswers = async () => {\n    console.log(\"Enter getAnswers\");\n\n    try {\n      const response = await fetch(\"http://\" + server_url + \"/navigators\");\n\n      if (response.ok) {\n        const answers = await response.json();\n\n        if (answers.length === 1) {\n          const newAnswer = answers[0];\n\n          if (answer === undefined || newAnswer.id !== answer.id) {\n            setAnswer(newAnswer);\n            setWaiting(false);\n            console.log(newAnswer);\n          }\n        }\n      }\n    } catch (error) {\n      setErrorMessage(\"Error! Server is not available\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"sdofjosfdosifd \"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 39,\n      columnNumber: 9\n    }, this), \" \"]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 38,\n    columnNumber: 14\n  }, this);\n};\n\n_s(App, \"PiD9eaHVAlnIGsjW4Kquddwc4Tc=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","Navbar","Dashboard","Navigatoren","BrowserRouter","Routes","Route","server_url","App","answer","setAnswer","undefined","waiting","setWaiting","errorMessage","setErrorMessage","getAnswers","console","log","response","fetch","ok","answers","json","length","newAnswer","id","error"],"sources":["C:/Users/ebr/code/navigator_admin/src/App.js"],"sourcesContent":["import React, { useState } from 'react'\r\nimport './App.css'\r\nimport Navbar from \"./components/Navbar\"\r\nimport Dashboard from \"./components/Dashboard\"\r\nimport Navigatoren from \"./components/Navigatoren\"\r\nimport { BrowserRouter, Routes, Route } from \"react-router-dom\"\r\n\r\nlet server_url = \"localhost:8080/server\";\r\n\r\nconst App = () => {\r\n\r\n    const [answer, setAnswer] = useState(undefined);\r\n    const [waiting, setWaiting] = useState(true);\r\n    const [errorMessage, setErrorMessage] = useState(\"\");\r\n\r\n    const getAnswers = async() => {\r\n        console.log(\"Enter getAnswers\");\r\n        try {\r\n            const response = await fetch(\r\n                \"http://\" + server_url + \"/navigators\"\r\n            );\r\n            if (response.ok) {\r\n                const answers = await response.json();\r\n                if (answers.length === 1) {\r\n                    const newAnswer = answers[0];\r\n                    if (answer === undefined || newAnswer.id !== answer.id) {\r\n                        setAnswer(newAnswer);\r\n                        setWaiting(false);\r\n                        console.log(newAnswer);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(\"Error! Server is not available\");\r\n        }\r\n    }\r\n\r\n    return ( < div >\r\n        <\r\n        p >\r\n        sdofjosfdosifd <\r\n        /p> < /\r\n        div > );\r\n}\r\n\r\nexport default App"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAO,WAAP;AACA,OAAOC,MAAP,MAAmB,qBAAnB;AACA,OAAOC,SAAP,MAAsB,wBAAtB;AACA,OAAOC,WAAP,MAAwB,0BAAxB;AACA,SAASC,aAAT,EAAwBC,MAAxB,EAAgCC,KAAhC,QAA6C,kBAA7C;;AAEA,IAAIC,UAAU,GAAG,uBAAjB;;AAEA,MAAMC,GAAG,GAAG,MAAM;EAAA;;EAEd,MAAM,CAACC,MAAD,EAASC,SAAT,IAAsBV,QAAQ,CAACW,SAAD,CAApC;EACA,MAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBb,QAAQ,CAAC,IAAD,CAAtC;EACA,MAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,EAAD,CAAhD;;EAEA,MAAMgB,UAAU,GAAG,YAAW;IAC1BC,OAAO,CAACC,GAAR,CAAY,kBAAZ;;IACA,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,YAAYb,UAAZ,GAAyB,aADD,CAA5B;;MAGA,IAAIY,QAAQ,CAACE,EAAb,EAAiB;QACb,MAAMC,OAAO,GAAG,MAAMH,QAAQ,CAACI,IAAT,EAAtB;;QACA,IAAID,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;UACtB,MAAMC,SAAS,GAAGH,OAAO,CAAC,CAAD,CAAzB;;UACA,IAAIb,MAAM,KAAKE,SAAX,IAAwBc,SAAS,CAACC,EAAV,KAAiBjB,MAAM,CAACiB,EAApD,EAAwD;YACpDhB,SAAS,CAACe,SAAD,CAAT;YACAZ,UAAU,CAAC,KAAD,CAAV;YACAI,OAAO,CAACC,GAAR,CAAYO,SAAZ;UACH;QACJ;MACJ;IACJ,CAfD,CAeE,OAAOE,KAAP,EAAc;MACZZ,eAAe,CAAC,gCAAD,CAAf;IACH;EACJ,CApBD;;EAsBA,oBAAS;IAAA,wBACL;MAAA;IAAA;MAAA;MAAA;MAAA;IAAA,QADK;EAAA;IAAA;IAAA;IAAA;EAAA,QAAT;AAMH,CAlCD;;GAAMP,G;;KAAAA,G;AAoCN,eAAeA,GAAf"},"metadata":{},"sourceType":"module"}