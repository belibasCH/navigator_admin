{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\ebr\\\\code\\\\navigator_admin\\\\src\\\\components\\\\Dashboard.jsx\";\nimport React from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nlet server_url = \"localhost:8080/server\";\n\nfunction Dashboard() {\n  const getQuestion = async () => {\n    try {\n      const response = await fetch(\"http://\" + server_url + \"/polls?token=\" + token + \"&filter=last\");\n\n      if (response.ok) {\n        const polls = await response.json();\n\n        if (polls.length === 1) {\n          const newPoll = polls[0];\n\n          if (poll === undefined || newPoll.id !== poll.id) {\n            setPoll(newPoll);\n            setWaiting(false);\n          }\n        }\n      }\n    } catch (error) {\n      setErrorMessage(\"Error! Server is not available\");\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"\",\n      children: /*#__PURE__*/_jsxDEV(\"h1\", {\n        children: \"Dashboard\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 30,\n        columnNumber: 13\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 29,\n      columnNumber: 9\n    }, this)\n  }, void 0, false);\n}\n\n_c = Dashboard;\nexport default Dashboard;\n\nvar _c;\n\n$RefreshReg$(_c, \"Dashboard\");","map":{"version":3,"names":["React","server_url","Dashboard","getQuestion","response","fetch","token","ok","polls","json","length","newPoll","poll","undefined","id","setPoll","setWaiting","error","setErrorMessage"],"sources":["C:/Users/ebr/code/navigator_admin/src/components/Dashboard.jsx"],"sourcesContent":["import React from 'react'\r\n\r\nlet server_url = \"localhost:8080/server\";\r\n\r\nfunction Dashboard() {\r\n\r\n    const getQuestion = async () => {\r\n        try {\r\n            const response = await fetch(\r\n                \"http://\" + server_url + \"/polls?token=\" + token + \"&filter=last\"\r\n            );\r\n            if (response.ok) {\r\n                const polls = await response.json();\r\n                if (polls.length === 1) {\r\n                    const newPoll = polls[0];\r\n                    if (poll === undefined || newPoll.id !== poll.id) {\r\n                        setPoll(newPoll);\r\n                        setWaiting(false);\r\n                    }\r\n                }\r\n            }\r\n        } catch (error) {\r\n            setErrorMessage(\"Error! Server is not available\");\r\n        }\r\n    };\r\n\r\n\r\n    return (<>\r\n        <div className=\"\">\r\n            <h1>Dashboard</h1>\r\n        </div>\r\n\r\n    </>\r\n\r\n    )\r\n}\r\n\r\nexport default Dashboard\r\n"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;;;AAEA,IAAIC,UAAU,GAAG,uBAAjB;;AAEA,SAASC,SAAT,GAAqB;EAEjB,MAAMC,WAAW,GAAG,YAAY;IAC5B,IAAI;MACA,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CACxB,YAAYJ,UAAZ,GAAyB,eAAzB,GAA2CK,KAA3C,GAAmD,cAD3B,CAA5B;;MAGA,IAAIF,QAAQ,CAACG,EAAb,EAAiB;QACb,MAAMC,KAAK,GAAG,MAAMJ,QAAQ,CAACK,IAAT,EAApB;;QACA,IAAID,KAAK,CAACE,MAAN,KAAiB,CAArB,EAAwB;UACpB,MAAMC,OAAO,GAAGH,KAAK,CAAC,CAAD,CAArB;;UACA,IAAII,IAAI,KAAKC,SAAT,IAAsBF,OAAO,CAACG,EAAR,KAAeF,IAAI,CAACE,EAA9C,EAAkD;YAC9CC,OAAO,CAACJ,OAAD,CAAP;YACAK,UAAU,CAAC,KAAD,CAAV;UACH;QACJ;MACJ;IACJ,CAdD,CAcE,OAAOC,KAAP,EAAc;MACZC,eAAe,CAAC,gCAAD,CAAf;IACH;EACJ,CAlBD;;EAqBA,oBAAQ;IAAA,uBACJ;MAAK,SAAS,EAAC,EAAf;MAAA,uBACI;QAAA;MAAA;QAAA;QAAA;QAAA;MAAA;IADJ;MAAA;MAAA;MAAA;IAAA;EADI,iBAAR;AAQH;;KA/BQhB,S;AAiCT,eAAeA,SAAf"},"metadata":{},"sourceType":"module"}